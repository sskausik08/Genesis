
# GPLInterpreter_parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '3F6B4A97D526E08F73A18B843C343432'
    
_lr_action_items = {'NAME':([0,2,3,5,6,8,10,11,],[1,1,-37,-36,7,-39,12,-38,]),'LBRACKET':([4,],[6,]),'COMMA':([7,9,12,],[-41,10,-40,]),'COLON':([1,],[4,]),'RBRACKET':([6,7,9,12,],[8,-41,11,-40,]),'$end':([2,3,5,8,11,],[0,-37,-36,-39,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'swdesc':([0,2,],[3,5,]),'swnames':([6,],[9,]),'topology':([0,],[2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> topology","S'",1,None,None,None),
  ('program -> gplreach','program',1,'p_program_gpl','GPLInterpreter.py',117),
  ('program -> gplreach SEP gplisolate','program',3,'p_program_gplreach_gplisolate','GPLInterpreter.py',120),
  ('program -> gplreach SEP constraints','program',3,'p_program_gplreach_cons','GPLInterpreter.py',126),
  ('program -> gplreach SEP gplisolate SEP constraints','program',5,'p_program_gplreach_isolate_cons','GPLInterpreter.py',129),
  ('gplreach -> gplreach statement','gplreach',2,'p_gplreach_stmts','GPLInterpreter.py',135),
  ('gplreach -> statement','gplreach',1,'p_gplreach_stmt','GPLInterpreter.py',138),
  ('statement -> reach_statement','statement',1,'p_statement_reach','GPLInterpreter.py',141),
  ('reach_statement -> NAME ASSIGN match COLON NAME REACH NAME','reach_statement',7,'p_reach','GPLInterpreter.py',147),
  ('reach_statement -> NAME ASSIGN match COLON NAME REACH NAME IN NUMBER','reach_statement',9,'p_reach_len','GPLInterpreter.py',156),
  ('reach_statement -> NAME ASSIGN match COLON NAME REACH LBRACKET waypointlist RBRACKET REACH NAME','reach_statement',11,'p_reach_waypoint','GPLInterpreter.py',165),
  ('reach_statement -> NAME ASSIGN match COLON NAME REACH LBRACKET waypointlist RBRACKET REACH NAME IN NUMBER','reach_statement',13,'p_reach_waypoint_len','GPLInterpreter.py',174),
  ('match -> NAME EQUALS STRING','match',3,'p_match','GPLInterpreter.py',183),
  ('match -> STRING','match',1,'p_match_str','GPLInterpreter.py',187),
  ('gplisolate -> gplisolate isolate_statement','gplisolate',2,'p_gplisolate','GPLInterpreter.py',223),
  ('gplisolate -> isolate_statement','gplisolate',1,'p_gplisolate_isolate','GPLInterpreter.py',226),
  ('gplisolate -> gplisolate nodeisolate_statement','gplisolate',2,'p_gplisolate_node','GPLInterpreter.py',229),
  ('gplisolate -> nodeisolate_statement','gplisolate',1,'p_gplisolate_nodeisolate','GPLInterpreter.py',232),
  ('isolate_statement -> NAME ISOLATE NAME','isolate_statement',3,'p_isolate','GPLInterpreter.py',235),
  ('isolate_statement -> ISOLATE LBRACKET namelist RBRACKET','isolate_statement',4,'p_isolate_allisolated','GPLInterpreter.py',252),
  ('isolate_statement -> LBRACKET namelist RBRACKET ISOLATE LBRACKET namelist RBRACKET','isolate_statement',7,'p_isolate_crossprod','GPLInterpreter.py',269),
  ('nodeisolate_statement -> NAME NODEISOLATE NAME','nodeisolate_statement',3,'p_nodeisolate','GPLInterpreter.py',292),
  ('waypointlist -> waypointlist SEMICOLON waypoints','waypointlist',3,'p_waypointlist_waypoints','GPLInterpreter.py',316),
  ('waypointlist -> waypoints','waypointlist',1,'p_waypointlist','GPLInterpreter.py',325),
  ('waypoints -> waypoints COMMA NAME','waypoints',3,'p_waypoints','GPLInterpreter.py',329),
  ('waypoints -> NAME','waypoints',1,'p_waypoints_name','GPLInterpreter.py',334),
  ('namelist -> namelist COMMA NAME','namelist',3,'p_namelist','GPLInterpreter.py',338),
  ('namelist -> NAME','namelist',1,'p_namelist_name','GPLInterpreter.py',343),
  ('ip -> NUMBER DOT NUMBER DOT NUMBER DOT NUMBER SLASH NUMBER','ip',9,'p_ip_subnet','GPLInterpreter.py',347),
  ('ip -> NUMBER DOT NUMBER DOT NUMBER DOT NUMBER','ip',7,'p_ip_address','GPLInterpreter.py',352),
  ('constraints -> constraints constraint','constraints',2,'p_constraints','GPLInterpreter.py',357),
  ('constraints -> constraint','constraints',1,'p_constraints_constraint','GPLInterpreter.py',360),
  ('constraint -> NAME COLON NUMBER','constraint',3,'p_constraint_switch','GPLInterpreter.py',363),
  ('constraint -> NAME ARROW NAME COLON NUMBER','constraint',5,'p_constraint_link','GPLInterpreter.py',368),
  ('constraint -> MINAVGTE','constraint',1,'p_constraint_te_minavg','GPLInterpreter.py',373),
  ('constraint -> MINMAXTE','constraint',1,'p_constraint_te_minmax','GPLInterpreter.py',378),
  ('topology -> topology swdesc','topology',2,'p_topology_switches','GPLInterpreter.py',387),
  ('topology -> swdesc','topology',1,'p_topology_switch','GPLInterpreter.py',390),
  ('swdesc -> NAME COLON LBRACKET swnames RBRACKET','swdesc',5,'p_swdesc','GPLInterpreter.py',393),
  ('swdesc -> NAME COLON LBRACKET RBRACKET','swdesc',4,'p_swdesc_empty','GPLInterpreter.py',400),
  ('swnames -> swnames COMMA NAME','swnames',3,'p_swnames','GPLInterpreter.py',404),
  ('swnames -> NAME','swnames',1,'p_swnames_name','GPLInterpreter.py',409),
]
